import optparse
import socket
from socket import *
from threading import * 


# for print scanning port respectively 
screen_lock = Semaphore(value=1) # value = 1 because use semaphore like mutex


# create socket and connect target host:port
# if connection success, print open
# if not, print close
def conn_scan(tgtHost, tgtPort):
    try:
        conn_sock = socket(AF_INET, SOCK_STREAM) # create socket, IPv4 and TCP respectively
        conn_sock.connect((tgtHost, tgtPort))
        
        # this response might give us an indication of 
        # the application running on the target host and port.
        conn_sock.send('HellPy\n'.encode())
        results = conn_sock.recv(100)
        
        # for print one thread 
        screen_lock.acquire() # lock other thread, decrease value=0 in semaphore 

        print('[+]{}/tcp open'.format(tgtPort))
        print('[+] {}'.format(str(results)))
        
    except:
        screen_lock.acquire()
        print('[-]{}/tcp closed'.format(tgtPort))
    finally:
        screen_lock.release() # unlock semaphore for other thread, increase value=1
        conn_sock.close()

# Host resolved and if it resolved, 
# send host:ports to conn_soc method
def portScan(tgtHost, tgtPorts):
    try:
        tgtIP = gethostbyname(tgtHost) # return IP address
    except:
        print('[-]Cannot resolve {}: Unknown host'.format(tgtHost))
        return

    try:
        tgtName = gethostbyaddr(tgtIP) # return true host name
        print("\n[+] Scan Results for: ", tgtName[0])
    except:
        print("\n[+] Scan Results for: ", tgtIP)
    setdefaulttimeout(3)
    
    # used thread for scannig sockets simultaneously  
    for tgtPort in tgtPorts:
        t = Thread(target=conn_scan, args=(tgtHost, int(tgtPort)))
        t.start()


def main():
    # for usage that this program
    parser = optparse.OptionParser('usage %prog -H <target host> -p <target port>')

    # create options
    parser.add_option('-H', dest='tgtHost', type='string', help='specify target host')
    parser.add_option('-p', dest='tgtPort', type='string', help='specify target port[s] separated by comma')

    # parse args and options then sign var 
    (options, args) = parser.parse_args()
    tgtHost = options.tgtHost
    tgtPorts= str(options.tgtPort).split(', ')
    
    if (tgtHost==None) or (tgtPorts[0]==None):
        print(parser.usage)
        exit(0)
    
    portScan(tgtHost, tgtPorts)

if __name__ == '__main__':
    main()

